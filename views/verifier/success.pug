extends ../layout.pug

block layout-content
	// Container for the spinner (initially hidden)
	#spinner-container
		.spinner
			.spinner-circle

	#loading-text
		.container2
			.centered-layout
				h1 Loading

	// Container for the success content (initially hidden)
	#success-container(style="display: none;")
		.container2
			.centered-layout
				h1 Success

				// Container to hold inline boxes using Flexbox
				.inline-box-container(style="display: flex; gap:30px; flex-direction: row; flex-wrap: wrap;justify-content: center;")
					// Iterate over each credential and display an inline box with dynamic background color and text color
					each credential, index in credentialPayloads
						- const branding = credential.credentialBranding || { backgroundColor: 'red', textColor: 'black' }
						.credential-box(style=`position:relative;overflow:hidden;display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start; position: relative; margin: 10px;border-radius:10px;`, id=`credential-box-${index}`)
							img(style="width: 240px; height: 150px; border-radius: 10px;")(src=credentialImages[index])

				i Verified on #{new Date(verificationTimestamp)}
				h3 Requested claims extracted from credentials

				.claims-tables
					each descriptorId in Object.keys(presentationClaims)
						h4= descriptorId
						each message in presentationMessages[descriptorId]
							p #{message}
						.table-container(style="overflow-x: auto;")
							table
								thead
									tr
										th Name
										th Value
								tbody
									each claim in presentationClaims[descriptorId]
										tr
											td= claim.name
											td.claim-value(data-raw-value=String(claim.value))= claim.value

				h3 Credentials

				// Text area to display credentials JSON format
				div#jsoneditor.wide
					div#copy
						button(id="copy-button" class="Btn Tiny" type="button") Copy Object #[span#checkmark âœ”]

	// JavaScript to show the spinner for 2 seconds and then hide it
	script.
		setTimeout(() => {
			const spinnerContainer = document.getElementById('spinner-container');
			const successContainer = document.getElementById('success-container');
			const loadingText = document.getElementById('loading-text');

			if (spinnerContainer && successContainer && loadingText) {
				spinnerContainer.style.display = 'none';
				successContainer.style.display = 'block';
				loadingText.style.display = 'none';
			}
			//- updateLayoutForExpiredCredentials(credentialPayloads);
		}, 2000); // Hide the spinner after 2000 milliseconds (2 seconds)

	script(src="https://cdn.jsdelivr.net/npm/jsoneditor@latest")
	script.
		const container = document.getElementById('jsoneditor');
		const options = {
			mode: 'view',
			modes: ['view'],
		};

		const payload = !{JSON.stringify(credentialPayloads)};

		const editor = new JSONEditor(container, options);
		editor.set(payload)

		editor.expandAll();

		document.querySelector('#copy-button').addEventListener('click', () => {
			try {
				const json = editor.get();
				const text = JSON.stringify(json, null, 2);

				const tempTextarea = document.createElement('textarea');
				tempTextarea.value = text;
				document.body.appendChild(tempTextarea);
				tempTextarea.select();
				document.execCommand('copy');
				document.body.removeChild(tempTextarea);
				document.querySelector('#copy #checkmark').classList.add("visible");
			} catch (err) {
				console.error('Error getting JSON from editor:', err);
			}
		});


	block footer
		include ../footer.pug

	link(rel="stylesheet" href="/styles/verifier/spinner.css")
	link(rel="stylesheet" href="/styles/index.css")
	link(rel="stylesheet" href="/styles/presentation-data.css")
	link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jsoneditor@10.2.0/dist/jsoneditor.min.css")
	link(rel="stylesheet" href="/styles/jsoneditor.css")
	script(src="/js/index.js")
	script(src="/js/check-expired.js")
	script(src="/js/truncate-long-fields.js")
